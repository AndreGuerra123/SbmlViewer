<html xmlns="http://www.w3.org/1999/xhtml" style="overflow-x: auto;">
<!-- 
Copyright 2016-2017 Institute for Systems Biology Moscow

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<!-- INFO
Description: Main file to interact with sbml files and transformations

Author: Evgeny Metelkin
Copyright: Institute for Systems Biology, Moscow
Last modification: 2017-01-15

Project-page: http://sbmlviewer.insilicobio.ru
-->
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="stylesheet" href="../lib/w3css/w3.css"/>
    
  <style>
  #filearea{
    border: 3px dashed grey;
  }
  hr{
    margin: 0;
  }
  #filearea {
    min-width: 250px;
  }
  </style>
       
    <script type="text/javascript">
<![CDATA[
  // OPTIONS
  var options={
    transform: "sbml2table",
    transform2: "sbml2element",
    filepath: "../cases/00001-sbml-l2v1.xml",
    useNames: "false",
    correctMathml: "false",
    equationsOff: "false",
    method: "URL"
  }
  
  /* alternative way to set MathJax options
    window.MathJax = { // settings for MathJax
      MathML: {
        //extensions: ["mml3.js", "content-mathml.js"]//,
        //jax: ["input/MathML","output/PreviewHTML"]
      },
      CommonHTML: { linebreaks: { automatic: true } , width: 'container' },
      "HTML-CSS": { linebreaks: { automatic: true } },
      SVG: { linebreaks: { automatic: true } }/*,
      menuSettings: { zoom: "Click", zscale: "200%" }
    };
    */
    function readXml(x, callback) { // return xml object as readed from file 
       var xmlhttp = new XMLHttpRequest();
       xmlhttp.open("GET", x, false);
       
       xmlhttp.onerror = function(){
         alert("Cannot upload the file.");
       };
       
       xmlhttp.onload = function(){
         callback(this.responseXML);
       };
       
       xmlhttp.onerror = function(){
         alert("Cannot onload the file.");
       };
       
       xmlhttp.send();
    }
    
    var xsltProcessor1 = new XSLTProcessor(); //processor for 1st xslt
    var xsltProcessor2 = new XSLTProcessor(); //processor for 2d xslt
    var modelDoc=null;
    
    window.onload = function() {
        var target = document.getElementById("filearea");
        
        target.addEventListener("dragover", function(event) {
            event.preventDefault();
        }, false);
        
        /*target.addEventListener("drop", function(event) {
            event.preventDefault();
            files = event.dataTransfer.files,
            validateUploadFile(files[0].name,"dragNdrop");
        }, false);*/
        
        document.getElementById("file").addEventListener("change", function(event) {
          validateUploadFile(document.getElementById('file').files[0].name, 'upload');
        }, false);
        
        //loadModeToPage(); //Display default model
    };
    
    function loadModeToPage() {      
      //Generate modelDoc depending on method of upload file
      switch(options["method"]) {
        case "URL":
            modelDoc = readXml(options["filepath"]);
            modelDocDisplayToPage();
            break;
        case "upload":
            readUploadFile(document.getElementById("file").files[0]);
            break;
        case "dragNdrop":
            readUploadFile(files[0]);
            break;
      } 
        
      function readUploadFile(file) {
        var reader = new FileReader();
        reader.readAsText(file);
        reader.onload = function() {
          modelDoc = new DOMParser().parseFromString(reader.result, "application/xml");
          modelDocDisplayToPage();
        } 
      }  

      function modelDocDisplayToPage() {
        // read and load table
        readXml("xslt/"+options["transform"]+".xsl", function(xsl1){
          xsltProcessor1.importStylesheet(xsl1);
          if (options["useNames"]) xsltProcessor1.setParameter(null, "useNames", options["useNames"]);
          if (options["correctMathml"]) xsltProcessor1.setParameter(null, "correctMathml", options["correctMathml"]);
          if (options["equationsOff"]) xsltProcessor1.setParameter(null, "equationsOff", options["equationsOff"]);
          
          resultDocument = xsltProcessor1.transformToFragment(modelDoc, document);
          document.getElementById("mainContent").appendChild(resultDocument.firstElementChild);
        });
        
        //update equations
        MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
            
        // read additional stylesheet
        var xsl2=readXml("xslt/"+options["transform2"]+".xsl");
        xsltProcessor2.importStylesheet(xsl2);
        if (options["useNames"]) xsltProcessor2.setParameter(null, "useNames", options["useNames"]);
        if (options["correctMathml"]) xsltProcessor2.setParameter(null, "correctMathml", options["correctMathml"]);
      }  
    }    
    
    function validateUploadFile(pathFile,method) {
      //document.getElementById("errorMess").innerHTML = "";
        
      if ((pathFile != "") && (pathFile.match(/(.xml)$/))) {
        document.getElementById("mainContent").innerHTML = "";
            
        switch(method) {
          case "URL": 
            options["filepath"] = pathFile;
            options["method"] = "URL";
            break;
          case "upload":
            options["method"] = "upload";
            break;
          case "dragNdrop":
            options["method"] = "dragNdrop";
            break;                   
        }
            
        loadModeToPage(); 
      }        
      else {
        document.getElementById("errorMess").innerHTML = "Документ не был загружен или имеет неверный формат";
      }
    }
    
    //transform element and open side window
    function w3_open(event) {
      // transformation
      var id=event.target.id;
      xsltProcessor2.setParameter(null, "elementId", event.target.id);
      var resultDocument = xsltProcessor2.transformToDocument(modelDoc); 
      
      document.getElementById("sideContent").removeChild(document.getElementById("sideContent").childNodes[0]);
      document.getElementById("sideContent").appendChild(resultDocument.firstElementChild);
      
      // show block
      document.getElementById("sideNav").style.display = "block";
      
      //update equations
      MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
    }

    function w3_close() {
      document.getElementById("sideNav").style.display = "none";
    }
        
        
]]>
    </script>
    <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      jax: ["input/TeX","input/MathML","output/PreviewHTML"],
      extensions: ["tex2jax.js","mml2jax.js","asciimath2jax.js","MathMenu.js","MathZoom.js","AssistiveMML.js", "[Contrib]/a11y/accessibility-menu.js", "MathML/mml3.js", "MathML/content-mathml.js"],
      TeX: {
        extensions: ["AMSmath.js","AMSsymbols.js","noErrors.js","noUndefined.js"]
      }
    });
    </script>

    <script type="text/javascript" src="../lib/mathjax/MathJax.js"> </script> <!----> <!-- external -->
    
  </head>
  <body class="w3-container" >
  
    <!--<div class="w3-right w3-light-green">
      <b>SBML Viewer beta by InSysBio:</b> transformation from SBML to human readable page.<br/>Homepage http://sbmlviewer.insilicobio.ru
    </div> -->
   
  <label id="filearea" class="w3-btn w3-block w3-teal">
    <input id="file" type="file" accept=".xml,.sbml" style="display:block;" onchange=""/>
    Press to load SBML file or drug'n'drop to the area
  </label>
   
    <!--<div id="filearea" class="w3-container w3-margin">
      
        <div hidden="true">
            <input onchange="validateUploadFile(document.getElementById('file').files[0].name,'upload')" type="file" id="file"/>
        </div>
        <label for="file" style="cursor:pointer;">
            <div class="w3-large w3-center w3-text-grey w3-padding" title="Drag'n'drop or click for add file">   
              Press to load SBML file or drug'n'drop to the area
            </div>    
        </label>
        <hr/>
        <div class="w3-center w3-text-grey w3-padding">
        <span>Or link </span><input type="text" id="urlFile" title="Enter URL"/> <button onclick="validateUploadFile(document.getElementById('urlFile').value,'URL')">Upload</button><span id="erMes"></span>
        </div>    
     </div>-->
     
    <div id="errorMess" class="w3-panel w3-text-red"/>

   <!--<div class="w3-container w3-grey"/>-->
     <div id="sideNav" class="w3-container w3-card-4" style="position:fixed; display: none; top: 50px; right:50px; min-width:800px; max-width:50%; min-height:200px; max-height:90%; overflow-y: auto; overflow-x: auto; background:#ddd; z-index: 10;">
        <span class="w3-closebtn" onclick="w3_close()">&#215;</span>
        <div id="sideContent">fff</div>
     </div>
    <div id="mainContent">Nothing to show</div>
     
  </body>
</html>